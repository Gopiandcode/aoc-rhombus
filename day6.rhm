#lang rhombus/and_meta

import:
  file("./utils/aoc_api.rhm")
  file("./utils/utils.rhm")
  file("./utils/lang.rhm") open
  lib("racket/main.rkt") as racket:
    rename:
      #{char-numeric?} as is_numeric_char
      #{char->integer} as char_to_int
      #{with-input-from-file} as with_input_from_file
      #{with-output-to-file} as with_output_to_file
      #{file-exists?} as exists_file

  lib("racket/string.rkt") as string:
    rename:
      #{string-prefix?} as is_string_prefix
      #{string-split} as split
      #{string-trim} as trim

def input: aoc_api.retrieve_input_for_day(6)
def test_input:
  multiline:
    "Time:      7  15   30"
    "Distance:  9  40  200"


let raw_input: test_input

fun solve_quadratic(a,b,c):
  values(
    (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a),
    (-b - math.sqrt(b * b - 4 * a * c)) / (2 * a)
  )

let time = 7
let res = 9

fun count_solutions(time,res):
  // x * x - x * time + res
  let values(p1, p2) = solve_quadratic(1, -time, res)
  let min = racket.floor(racket.max(racket.min(p1, p2), 0) + 1)
  let max = racket.ceiling(racket.max(racket.max(p1, p2), 0) - 1)
  max - min + 1

fun extract_times(str):
  let ["Time", times]: utils.string.split(str, ":")
  let [time, ...]: utils.string.split(times, " ")
  [String.to_number(time), ...]

fun extract_distances(str):
  let ["Distance", distances]: utils.string.split(str, ":")
  let [distance, ...]: utils.string.split(distances, " ")
  [String.to_number(distance), ...]


fun parse_input(raw_input):
  match utils.string.split_lines(raw_input)
  | [times, distances]:
      let [time, ...]: extract_times(times)
      let [dist, ...]: extract_distances(distances)
      [Pair(time, dist), ...]


fun solve_for_part1(raw_input):
  let [Pair(time, dist), ...]: parse_input(raw_input)
  let solutions: [count_solutions(time, dist), ...]
  math.exact(racket.#{*}(& solutions))

check:
  solve_for_part1(test_input)
  ~is 288

fun extract_times2(str):
  let ["Time", times]: utils.string.split(str, ":")
  let [time, ...]: utils.string.split(times, " ")
  String.to_number(utils.string.join(time, ...))

fun extract_distances2(str):
  let ["Distance", distances]: utils.string.split(str, ":")
  let [distance, ...]: utils.string.split(distances, " ")
  String.to_number(utils.string.join(distance, ...))



fun parse_input2(raw_input):
  match utils.string.split_lines(raw_input)
  | [times, distances]:
      let time: extract_times2(times)
      let dist: extract_distances2(distances)
      Pair(time, dist)


fun solve_for_part2(raw_input):
  let Pair(time, dist): parse_input2(raw_input)
  let solutions: count_solutions(time, dist)
  math.exact(solutions)

check:
  solve_for_part2(test_input)
  ~is 71503

let result2: solve_for_part2(input)
// aoc_api.submit_result_for_day(6, result2, ~level:2)

